# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven #

name: Java CI with Maven

on:
  push:
    branches: [ main , buildah ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: [self-hosted,aks,github-lab]

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.2

      - name: Set up Buildah
        run: |
          export DEBIAN_FRONTEND=noninteractive

          # Get dependencies
          apt-get update
          apt-get install -y \
              curl \
              build-essential \
              libbtrfs-dev \
              make \
              bats \
              git \
              libapparmor-dev \
              libdevmapper-dev \
              libglib2.0-dev \
              libgpgme11-dev \
              libseccomp-dev \
              libselinux1-dev

          # Install goenv and golang
          git clone https://github.com/syndbg/goenv.git ~/.goenv
          echo 'export GOENV_ROOT="$HOME/.goenv"' >> ~/.bashrc
          echo 'export PATH="$GOENV_ROOT/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(goenv init -)"' >> ~/.bashrc
          source ~/.bashrc
          goenv install 1.16.15
          goenv global 1.16.15
          source ~/.bashrc

          # Clone buildah and build
          git clone https://github.com/containers/buildah ${GOPATH}/src/github.com/containers/buildah
          cd ${GOPATH}/src/github.com/containers/buildah
          go get -d ./
          export GO111MODULE=auto
          make runc all SECURITYTAGS="apparmor seccomp"

      - run: mvn package

      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          base-image: docker.io/fabric8/java-alpine-openjdk11-jre
          image: whoha4242/spring-petclinic
          tags: v1
          content: |
            target/spring-petclinic-2.7.0.BUILD-SNAPSHOT.jar
          entrypoint: java -jar spring-petclinic-2.7.0.BUILD-SNAPSHOT.jar
          port: 8080

      - name: Push To Registry
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker.io/whoha4242
          username: whoha4242
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push-to-registry.outputs) }}"
